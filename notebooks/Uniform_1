{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "P4o0p2YJzJhh"
      },
      "source": [
        "# Discrete Uniform Distribution "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ppd4_i3OzJho"
      },
      "source": [
        "## Problem statement\n",
        "\n",
        "The number of books sold by a bookseller per day is given in 'bookseller.csv'.\n",
        "\n",
        "Let\n",
        "\n",
        "X = Number of books sold by a bookseller per day\n",
        "\n",
        "X is a Discrete Random variable (because it represents the book count). Let's see the distribution of X and answer the below questions.\n",
        "\n",
        "\n",
        "1. Find the probability that more than (or equal to) 96 books will be sold on a given day\n",
        "2. Find the probability that less than (or equal to) 92 books will be sold on a given day"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yidTyYLxzJhp"
      },
      "source": [
        "### Let's import the libraries "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "VzqlTI-bzJhq"
      },
      "outputs": [],
      "source": [
        "# import the important packages\n",
        "import pandas as pd  # library used for data manipulation and analysis\n",
        "import numpy as np  # library used for working with arrays\n",
        "import matplotlib.pyplot as plt  # library for plots and visualizations\n",
        "import seaborn as sns  # library for visualizations\n",
        "\n",
        "#%matplotlib inline\n",
        "\n",
        "import scipy.stats as stats  # this library contains a large number of probability distributions as well as a growing library of statistical functions"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uuiMSks_zJhs"
      },
      "source": [
        "### Reading the Data into the DataFrame"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "6HgAlEVjzJhs",
        "outputId": "3fefc786-d347-4747-bf8d-ce372aa73cbe"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   S.No        Date  Number of Books Sold\n",
              "0     1  01-01-2020                    90\n",
              "1     2  02-01-2020                   100\n",
              "2     3  03-01-2020                   100\n",
              "3     4  04-01-2020                    97\n",
              "4     5  05-01-2020                    93"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3585fb46-1027-483c-bf5f-75eff3975ba8\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>S.No</th>\n",
              "      <th>Date</th>\n",
              "      <th>Number of Books Sold</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>01-01-2020</td>\n",
              "      <td>90</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>02-01-2020</td>\n",
              "      <td>100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>03-01-2020</td>\n",
              "      <td>100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>04-01-2020</td>\n",
              "      <td>97</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>05-01-2020</td>\n",
              "      <td>93</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3585fb46-1027-483c-bf5f-75eff3975ba8')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-3585fb46-1027-483c-bf5f-75eff3975ba8 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-3585fb46-1027-483c-bf5f-75eff3975ba8');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ],
      "source": [
        "book_count = pd.read_csv(\"bookseller.csv\")\n",
        "book_count.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lKugrD3wzJht"
      },
      "source": [
        "Let's plot the histogram of data along with the PDF of uniform distribution using the parameters minimum book sold and maximum book sold in a day."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "92vciL8NzJht",
        "outputId": "0d82d71c-a27e-4a3d-b180-94a6d03ffdfd"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "# visualize the distribution of number of books sold\n",
        "plt.hist(book_count[\"Number of Books Sold\"], 11, rwidth=0.9, density=True) # plot the histogram\n",
        "plt.axhline(1 / 11, color=\"red\") # draw a horizontal red line at y = 1/11\n",
        "plt.xlabel(\"Number of books sold\") # set the x-axis label\n",
        "plt.ylabel(\"Density\") # set the y-axis label\n",
        "plt.title(\"Data Distribution\") # set the title\n",
        "plt.show() # display the plot"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "x5C2jp2lzJhv"
      },
      "source": [
        "**Insight**: As you can see from the above plot that all the values between 90 and 100 are having almost equal probability, you can assume that the number of books sold follows a discrete uniform distribution.\n",
        "\n",
        "X ~ U(90,100)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "id": "ROJnkK-gzJhw"
      },
      "outputs": [],
      "source": [
        "# import the required function\n",
        "from scipy.stats import uniform\n",
        "\n",
        "# use the uniform.pmf() function to generate the probability distribution\n",
        "k = np.arange(90, 101)\n",
        "probs = uniform.pdf(k, loc=90, scale=11)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "outHcoGpzJhw"
      },
      "source": [
        "**Find the probability that more than 96 books will be sold on a given day**\n",
        "\n",
        "$ P(X\\geq 96)$"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "EVamDz94zJhx",
        "outputId": "030ad2f0-fbec-43be-9c59-e58b82157148"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "# plot the probability distribution\n",
        "# We are plotting the distributions here to better visualize the calculations.\n",
        "# Of course you do not 'need' to create the following visualization to answer the question above.\n",
        "# You can directly use the cdf function for probability calculations.\n",
        "\n",
        "barl = plt.bar(k, probs) # make a barplot\n",
        "\n",
        "for i in range(6, 11):\n",
        "    barl[i].set_color(\"r\") # color the required bars in red\n",
        "plt.xlabel(\"Number of books sold\") # set the x-axis label\n",
        "plt.ylabel(\"Probability\") # set the y-axis label\n",
        "plt.title(\"Discrete Uniform Distribution: X ~ U(90,100)\") # set the title\n",
        "plt.show() # display the plot"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ndQILhYTzJhy"
      },
      "source": [
        "In the above graph, the red region represents P(X>=96). Let's calculate the probability that more than 96 books will be sold on a given day. We will use uniform.cdf() for this."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ECc44Y4XzJhy",
        "outputId": "f33c3d9a-ed48-4a01-bfbd-5978dceed443"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.4545454545454546"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ],
      "source": [
        "1 - uniform.cdf(96, loc=90, scale=11)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "StM5OmvozJhz"
      },
      "source": [
        "**Find the probability that less than 92 books will be sold on a given day**\n",
        "\n",
        "\n",
        "$ P(X\\leq 92) $"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "3XBhYQ3ezJhz",
        "outputId": "169cb569-cfe7-4070-c51e-e605920c5128"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "# plot the probability distribution\n",
        "# We are plotting the distributions here to better visualize the calculations.\n",
        "# Of course you do not 'need' to create the following visualization to answer the question above.\n",
        "# You can directly use the cdf function for probability calculations.\n",
        "barl = plt.bar(k, probs) # make a barplot\n",
        "\n",
        "for i in range(0, 3):\n",
        "    barl[i].set_color(\"r\") # color the required bars in red\n",
        "plt.xlabel(\"Number of books sold\") # set the x-axis label\n",
        "plt.ylabel(\"Probability\") # set the y-axis label\n",
        "plt.title(\"Discrete Uniform Distribution: X ~ U(90,100)\") # set the title\n",
        "plt.show() # display the plot"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zY6C1ps2zJhz"
      },
      "source": [
        "In the above graph, the red region represents P(X<=92). Let's calculate the probability that less than 92 books will be sold on a given day. We will use uniform.cdf() for this."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KzAMnZESzJhz",
        "outputId": "a02c4a3f-8d75-4534-d3f0-fafde005e06c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.2727272727272727"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ],
      "source": [
        "uniform.cdf(93, loc=90, scale=11)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "heUy3WHpzJhz"
      },
      "source": [
        "### Conclusion:\n",
        "\n",
        "There is a 45.45% chance that more than 96 books will be sold on a given day.\n",
        "\n",
        "There is a 27.27% chance that less than 92 books will be sold on a given day."
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Continuous Uniform Distribution"
      ],
      "metadata": {
        "id": "IabRwd7_0bUL"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Problem statement\n",
        "\n",
        "\n",
        " IT industry records the amount of time a software engineer needs to fix a  bug in the initial phase of software development in 'debugging.csv'.\n",
        "\n",
        "Let\n",
        "\n",
        "X = Time needed to fix bugs\n",
        "\n",
        "\n",
        "X is a continuous random variable. Let's see the distribution of X and answer the below questions.\n",
        "\n",
        "\n",
        "1. Find the probability that a randomly selected software debugging requires less than three hours\n",
        "\n",
        "2. Find the probability that a randomly selected software debugging requires more than two hours\n",
        "\n",
        "3. Find the 50th percentile of the software debugging time\n"
      ],
      "metadata": {
        "id": "NusX08AO0m0K"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Reading the Data into the Dataframe"
      ],
      "metadata": {
        "id": "wtrjfB_h0rt3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "debugging = pd.read_csv(\"debugging.csv\")\n",
        "debugging.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "qTXRmYCC0ub2",
        "outputId": "76a0695f-87a4-4a1c-c42b-cf728b9e7b60"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Bug ID  Time Taken to fix the bug\n",
              "0   12986                       2.42\n",
              "1   12987                       2.03\n",
              "2   12988                       2.74\n",
              "3   12989                       3.21\n",
              "4   12990                       3.40"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1565aa0e-4221-4f93-9f52-7a470260d651\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Bug ID</th>\n",
              "      <th>Time Taken to fix the bug</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>12986</td>\n",
              "      <td>2.42</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>12987</td>\n",
              "      <td>2.03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>12988</td>\n",
              "      <td>2.74</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>12989</td>\n",
              "      <td>3.21</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>12990</td>\n",
              "      <td>3.40</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1565aa0e-4221-4f93-9f52-7a470260d651')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-1565aa0e-4221-4f93-9f52-7a470260d651 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-1565aa0e-4221-4f93-9f52-7a470260d651');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Let's plot the histogram of data along with the PDF of uniform distribution using the parameters minimum time required and maximum time required for bug fixing."
      ],
      "metadata": {
        "id": "m54vs0oq0r0l"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# visualize the distribution of the time needed for bug fixing\n",
        "plt.hist(debugging[\"Time Taken to fix the bug\"], density=True)\n",
        "plt.axhline(1 / 4, color=\"red\")\n",
        "plt.xlabel(\"Time required for bug fixing\")\n",
        "plt.ylabel(\"Probability\")\n",
        "plt.title(\"Data Distribution\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "Jdvkwc0R01Ob",
        "outputId": "1abc2d10-5cfc-4833-fb1b-77fdf263b763"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Another way to recognize a uniform distribution in your data is to look at a density plot. We will use displot of seaborn library to visualize the distribution of time needed for bug fixing."
      ],
      "metadata": {
        "id": "RylPUyFk02yK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Density plot of time taken to fix the bug\n",
        "sns.displot(debugging[\"Time Taken to fix the bug\"], kde=True)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 369
        },
        "id": "QKbMx4ky05sl",
        "outputId": "ca0f8427-f382-4436-a17b-f1a54f4da393"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Insight**: As you can see from the above plot that all the values between 1 and 5 are having almost equal probability, we are going to use continuous uniform distribution. We need to decide the endpoints. Here, endpoints are 1 and 5.\n",
        "\n",
        "X ~ U(1, 5)"
      ],
      "metadata": {
        "id": "JM5iqjdf09qi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# import the required function\n",
        "from scipy.stats import uniform\n",
        "\n",
        "# use the uniform.pmf() function to generate the probability distribution\n",
        "x = np.linspace(1, 5, 50)\n",
        "probs = uniform.pdf(x, loc=1, scale=4)"
      ],
      "metadata": {
        "id": "hXMhpgXM0--g"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Find the probability that a randomly selected software debugging requires a maximum time of 3 hours** \n",
        "\n",
        "**CDF:** of a random variable (X) is the probability that X  will take the value less than or equal to x. It can be represented mathematically as below.\n",
        "\n",
        ">$F_X(x) = P(X\\leq x)$\n",
        "\n",
        "\n",
        "In our case, random variable (X) is the number of hours.\n",
        "\n",
        "$ P(X\\leq 3)$"
      ],
      "metadata": {
        "id": "GkAGwAd11BKC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# plot the probability distribution\n",
        "# We are plotting the distributions here to better visualize the calculations.\n",
        "# Of course you do not 'need' to create the following visualization to answer the question above.\n",
        "# You can directly use the cdf function for probability calculations.\n",
        "x1 = np.linspace(1, 3, 25)\n",
        "plt.plot(x, probs)\n",
        "plt.fill_between(x, probs)\n",
        "plt.fill_between(x1, uniform.pdf(x=x1, loc=1, scale=4), color=\"r\")\n",
        "plt.xlabel(\"Time required for bug fixing\")\n",
        "plt.ylabel(\"Probability\")\n",
        "plt.title(\"Continuous Uniform Distribution: X ~ U(1,5)\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "7PxvbgrU1Dx2",
        "outputId": "89711550-766c-455e-c79d-7c02b15b930c"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "In the above graph, the red region represents P(X<=3). Let's calculate the probability that that a randomly selected software debugging requires a maximum time of 3 hours. We will use uniform.cdf() for this."
      ],
      "metadata": {
        "id": "0z7AcUSZ1HPI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "uniform.cdf(x=3, loc=1, scale=4)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "r57aum1F1JLU",
        "outputId": "45de6c27-9fd6-494c-d41b-e7d5cfb9b77a"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.5"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "**Find the probability that a randomly selected software bug fixing requires more than two hours.**\n",
        "\n",
        "$ P(X>2)$"
      ],
      "metadata": {
        "id": "c1vVQEmq1LUV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# plot the probability distribution\n",
        "# We are plotting the distributions here to better visualize the calculations.\n",
        "# Of course you do not 'need' to create the following visualization to answer the question above.\n",
        "# You can directly use the cdf function for probability calculations.\n",
        "x1 = np.linspace(2, 5, 20)\n",
        "plt.plot(x, probs)\n",
        "plt.fill_between(x, probs)\n",
        "plt.fill_between(x1, uniform.pdf(x=x1, loc=1, scale=4), color=\"r\")\n",
        "plt.xlabel(\"Time required for bug fixing\")\n",
        "plt.ylabel(\"Probability\")\n",
        "plt.title(\"Continuous Uniform Distribution: X ~ U(1,5)\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "qTe4JuEN1M_W",
        "outputId": "8e4532e7-d8fb-438c-b1ba-53c0d4994bc4"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "In the above graph, the reg region represent P(X>2). Let's calculate the probability that that that a randomly selected software debugging requires more than two hours. We will use uniform.cdf() for this."
      ],
      "metadata": {
        "id": "bpzO7kr61Po-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "1 - uniform.cdf(x=2, loc=1, scale=4)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lJxP0dsi1R9W",
        "outputId": "d34bb532-8b28-4023-a15c-404f01040151"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.75"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Let's calculate the 50th percentile of software debugging time.**\n",
        "\n",
        "ppf(): It is used to calculate the percentile point given probability. It works opposite of cdf()"
      ],
      "metadata": {
        "id": "iRfEzkKf1UAD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "uniform.ppf(q=0.5, loc=1, scale=4)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "M_vWxjet1Vwv",
        "outputId": "e8adf9ee-878c-4ab7-d92f-68519b18ad91"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "3.0"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Conclusion:  \n",
        "\n",
        "There is a 50% chance that a randomly selected software debugging requires less than three hours.\n",
        "\n",
        "There is a 75% chance that a randomly selected software debugging requires more than two hours.\n",
        "\n",
        "The 50th percentile of the software debugging time is 3 hours."
      ],
      "metadata": {
        "id": "BLBKhTc21WwI"
      }
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.5"
    },
    "colab": {
      "name": "Uniform_distribution.ipynb",
      "provenance": [],
      "collapsed_sections": [
        "P4o0p2YJzJhh",
        "ppd4_i3OzJho",
        "yidTyYLxzJhp",
        "uuiMSks_zJhs",
        "IabRwd7_0bUL",
        "wtrjfB_h0rt3"
      ]
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}